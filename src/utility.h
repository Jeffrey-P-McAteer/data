/// \file
/// Define several utility functions.

#pragma once
#include <string>
#include <cmath>
#include <GL/glut.h>

#include "Vector3D.h"
#include "TrafficLight.h"

using namespace std;

// Increments signal to next valid state
Signal next_light_color(Signal current);

// Converts a heading number between 0.0 and 360.0 to a string.
// Assumes 180 points north and 90 points east
std::string heading_to_string(float heading);

// Converts degrees to radians
float deg_to_rad(float degrees);

/// Display text at the current raster position using font GLUT_BITMAP_9_BY_15.
/// \param str String to be displayed.
void printString(string str);

/// Display text at the current raster position using font GLUT_BITMAP_HELVETICA_18.
/// \param str String to be displayed.
void printLargeString(string str);

/// Compute a Vector3 rotated around y axis based on an input Vector3 and an angle.
/// \param input Input Vector3
/// \param angle Angle of rotation
/// \return Resulting Vector3 generated by rotating input around y axis for the angle.
Vector3 computeRotatedVector(Vector3 input, float angle);


// String utility functions from 2020 standard, back-ported to c++17 compilers for use in this project.
// From https://stackoverflow.com/questions/874134/find-out-if-string-ends-with-another-string-in-c
#if __cplusplus >= 201703L // C++17 and later 
#include <string>

static bool endsWith(std::string str, std::string suffix)
{
    return str.size() >= suffix.size() && 0 == str.compare(str.size()-suffix.size(), suffix.size(), suffix);
}

static bool startsWith(std::string str, std::string prefix)
{
    return str.size() >= prefix.size() && 0 == str.compare(0, prefix.size(), prefix);
}
static void replaceAll(std::string& str, const std::string& from, const std::string& to) {
    if(from.empty())
        return;
    size_t start_pos = 0;
    while((start_pos = str.find(from, start_pos)) != std::string::npos) {
        str.replace(start_pos, from.length(), to);
        start_pos += to.length(); // In case 'to' contains 'from', like replacing 'x' with 'yx'
    }
}
#endif // C++17


